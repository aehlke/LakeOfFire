import Foundation
import SwiftUIWebView
//import WebKit

public struct YoutubeCaptionsUserScript {
    public static let userScript = WebViewUserScript(source: script, injectionTime: .atDocumentStart, forMainFrameOnly: false, in: .page, allowedDomains: Set(["youtube.com", "m.youtube.com", "www.youtube.com"]))
    
    static private let script = #"""
(function() {
    'use strict';

    const languageMapping = {
        "arabic": "ar",
        "عربي": "ar",
        "cantonese": "yue",
        "廣東話": "yue",
        "chinese (hong kong)": "yue",
        "czech": "cs",
        "čeština": "cs",
        "danish": "da",
        "dansk": "da",
        "dutch": "nl",
        "nederlands": "nl",
        "english": "en",
        "ingles": "en",
        "angielski": "en",
        "australian english": "en-AU",
        "british english": "en-GB",
        "irish english": "en-IE",
        "south african english": "en-ZA",
        "american english": "en-US",
        "finnish": "fi",
        "suomi": "fi",
        "flemish": "nl",
        "vlaams": "nl",
        "french": "fr",
        "francais": "fr",
        "français": "fr",
        "canadian french": "fr-CA",
        "european french": "fr-FR",
        "german": "de",
        "deutsch": "de",
        "alemán": "de",
        "greek": "el",
        "ελληνικά": "el",
        "hebrew": "he",
        "עברית": "he",
        "hindi": "hi",
        "हिन्दी": "hi",
        "hungarian": "hu",
        "magyar": "hu",
        "indonesian": "id",
        "bahasa indonesia": "id",
        "italian": "it",
        "italiano": "it",
        "japanese": "ja",
        "日本語": "ja",
        "korean": "ko",
        "한국어": "ko",
        "mandarin": "zh",
        "中文": "zh",
        "simplified chinese": "zh-CN",
        "traditional chinese": "zh-TW",
        "norwegian": "no",
        "norsk": "no",
        "polish": "pl",
        "polski": "pl",
        "portuguese": "pt",
        "portugues": "pt",
        "português": "pt",
        "brazilian portuguese": "pt-BR",
        "european portuguese": "pt-PT",
        "romanian": "ro",
        "română": "ro",
        "russian": "ru",
        "русский": "ru",
        "slovak": "sk",
        "slovenčina": "sk",
        "spanish": "es",
        "espanol": "es",
        "español": "es",
        "mexican spanish": "es-MX",
        "european spanish": "es-ES",
        "spanisch": "es",
        "swedish": "sv",
        "svenska": "sv",
        "thai": "th",
        "ไทย": "th",
        "turkish": "tr",
        "türkçe": "tr",
    };

    function mapLanguageToCode(label) {
        const lowerLabel = label.toLowerCase();
        for (const [name, code] of Object.entries(languageMapping)) {
            if (lowerLabel.includes(name)) {
                return code;
            }
        }
        return null;
    }

    function extractCaptionsFromPlayerResponse(playerResponse) {
        if (!playerResponse || !playerResponse.captions) {
            console.error('No captions found in player response.');
            return [];
        }

        const captionTracks = playerResponse.captions.playerCaptionsTracklistRenderer.captionTracks;
        const captions = captionTracks.map(track => ({
            label: track.name.simpleText,
            languageCode: mapLanguageToCode(track.languageCode),
            languageLabel: track.languageCode,
            kind: track.kind || 'standard',
            isAutoGenerated: track.kind === 'asr',
            baseUrl: track.baseUrl
        }));

        return captions;
    }

    function sendCaptions() {
        const playerResponseScript = Array.from(document.querySelectorAll('script')).find(script => script.textContent.includes('ytInitialPlayerResponse'));
        if (playerResponseScript) {
            const playerResponseMatch = playerResponseScript.textContent.match(/ytInitialPlayerResponse\s*=\s*(\{.+?\});/);
            if (playerResponseMatch && playerResponseMatch[1]) {
                const playerResponse = JSON.parse(playerResponseMatch[1]);
                const captions = extractCaptionsFromPlayerResponse(playerResponse);

                const captionData = {
                    videoId: new URL(location.href).searchParams.get('v'),
                    captions
                };

                if (window.webkit && window.webkit.messageHandlers && window.webkit.messageHandlers.someHandler) {
                    window.webkit.messageHandlers.someHandler.postMessage(captionData);
                } else {
                    console.log(captionData);
                }
            } else {
                console.error('ytInitialPlayerResponse not found in script content.');
            }
        } else {
            console.error('ytInitialPlayerResponse script not found.');
        }
    }

    // Observe URL changes and call sendCaptions
    let lastUrl = location.href;
    new MutationObserver(() => {
        const currentUrl = location.href;
        if (currentUrl !== lastUrl) {
            lastUrl = currentUrl;
            sendCaptions();
        }
    }).observe(document, { subtree: true, childList: true });

    // Initial call
    sendCaptions();
})();

"""#
}
